# https://scikit-learn.org/stable/modules/generated/sklearn.base.TransformerMixin.html#examples-using-sklearn-base-transformermixin
from sklearn.base import BaseEstimator, TransformerMixin
import numpy as np
from scipy import sparse


class Binary_OHE(TransformerMixin, BaseEstimator):
    """Wrapper for Binary OHE"""

    def __init__(self, delimiter=','):
        """

        :param delimiter: Delimiter to split features, strip() not applied on features. Comma is default.
        """
        self.delimiter = delimiter
        self.vocab = {}
        self.n_features = None

    def fit(self, x_train):
        """

        :param x_train: List of strings containing comma seperated features.
        :return: self
        """
        values = []
        for text in x_train:
            values += text.split(self.delimiter)

        all_features = set(values)
        self.vocab = {feature: i for i, feature in enumerate(all_features)}
        self.n_features = len(self.vocab.keys())
        return self

    def transform(self, x_train):
        """

        :param x_train: List of strings containing comma seperated features.
        :return: sparse csr matrix
        """
        encodings = np.array([[0] * self.n_features for _ in range(len(x_train))])
        for i, text in enumerate(x_train):
            for feature in text.split(self.delimiter):
                idx = self.vocab.get(feature)
                encodings[i][idx] = 1
        return sparse.csr_matrix(encodings)

    def fit_transform(self, x_train, y=None):
        """
        Calls fit then calls transform.
        :param x_train: List of strings containing comma seperated features.
        :return: sparse csr matrix
        """
        return self.fit(x_train).transform(x_train)


