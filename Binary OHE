# https://scikit-learn.org/stable/modules/generated/sklearn.base.TransformerMixin.html#examples-using-sklearn-base-transformermixin
from sklearn.base import BaseEstimator, TransformerMixin
import numpy as np
from scipy import sparse


class Binary_OHE(TransformerMixin, BaseEstimator):
    """Wrapper for creating True/False encoding"""

    def __init__(self):
        
        self.vocab = {}
        self.n_features = None

    def fit(self, X):
        values = []
        for text in X:
            values += text.split(',')

        all_features = set(values)
        self.vocab = {feature: i for i, feature in enumerate(all_features)}
        return self

    def transform(self, X):
        self.n_features = len(self.vocab.keys())
        encodings = np.array([[0] * self.n_features for _ in range(len(X))])
        for i, text in enumerate(X):
            for feature in text.split(':'):
                idx = self.vocab.get(feature)
                encodings[i][idx] = 1
        return sparse.csr_matrix(encodings)

    def fit_transform(self, X, y=None):
        return self.fit(X).transform(X)
